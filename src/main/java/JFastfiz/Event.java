/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package JFastfiz;

public class Event {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Event(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Event obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(Event obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        fastfizJNI.delete_Event(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public double getTime() {
    return fastfizJNI.Event_getTime(swigCPtr, this);
  }

  public Ball.Type getBall1() {
    return Ball.Type.swigToEnum(fastfizJNI.Event_getBall1(swigCPtr, this));
  }

  public Ball getBall1Data() {
    return new Ball(fastfizJNI.Event_getBall1Data(swigCPtr, this), false);
  }

  public static boolean eventCmp(Event event1, Event event2) {
    return fastfizJNI.Event_eventCmp(Event.getCPtr(event1), event1, Event.getCPtr(event2), event2);
  }

  public String toString() {
    return fastfizJNI.Event_toString(swigCPtr, this);
  }

  public Event.Type getType() {
    return Event.Type.swigToEnum(fastfizJNI.Event_getType(swigCPtr, this));
  }

  public String getTypeString() {
    return fastfizJNI.Event_getTypeString(swigCPtr, this);
  }

  public Ball.Type getBall2() {
    return Ball.Type.swigToEnum(fastfizJNI.Event_getBall2(swigCPtr, this));
  }

  public Ball getBall2Data() {
    return new Ball(fastfizJNI.Event_getBall2Data(swigCPtr, this), false);
  }

  public boolean relatedTo(Event other) {
    return fastfizJNI.Event_relatedTo(swigCPtr, this, Event.getCPtr(other), other);
  }

  public boolean involvesBall(Ball.Type b) {
    return fastfizJNI.Event_involvesBall(swigCPtr, this, b.swigValue());
  }

  public void handle(TableState ts, boolean VERBOSE) {
    fastfizJNI.Event_handle__SWIG_0(swigCPtr, this, TableState.getCPtr(ts), ts, VERBOSE);
  }

  public void handle(TableState ts) {
    fastfizJNI.Event_handle__SWIG_1(swigCPtr, this, TableState.getCPtr(ts), ts);
  }

  public final static class Type {
    public final static Event.Type NO_EVENT = new Event.Type("NO_EVENT");
    public final static Event.Type STATE_CHANGE = new Event.Type("STATE_CHANGE");
    public final static Event.Type BALL_COLLISION = new Event.Type("BALL_COLLISION");
    public final static Event.Type RAIL_COLLISION = new Event.Type("RAIL_COLLISION");
    public final static Event.Type POCKETED = new Event.Type("POCKETED");
    public final static Event.Type CUE_STRIKE = new Event.Type("CUE_STRIKE");
    public final static Event.Type MISCUE = new Event.Type("MISCUE");
    public final static Event.Type UNKNOWN_EVENT = new Event.Type("UNKNOWN_EVENT");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Type swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Type.class + " with value " + swigValue);
    }

    private Type(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Type(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Type(String swigName, Type swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Type[] swigValues = { NO_EVENT, STATE_CHANGE, BALL_COLLISION, RAIL_COLLISION, POCKETED, CUE_STRIKE, MISCUE, UNKNOWN_EVENT };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
