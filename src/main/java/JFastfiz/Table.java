/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package JFastfiz;

public class Table {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Table(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Table obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(Table obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        fastfizJNI.delete_Table(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Table() {
    this(fastfizJNI.new_Table__SWIG_0(), true);
  }

  public Table(double length, double width, double cornerPocketWidth, double sidePocketWidth, double muS, double muR, double muSp, double railHeight, double cueLength, double railVelDampingX, double railVelDampingY, double railSpinDamping, double railZSpinAngleAdj, double railVelAngleAdj) {
    this(fastfizJNI.new_Table__SWIG_1(length, width, cornerPocketWidth, sidePocketWidth, muS, muR, muSp, railHeight, cueLength, railVelDampingX, railVelDampingY, railSpinDamping, railZSpinAngleAdj, railVelAngleAdj), true);
  }

  public Table(double length, double width, double cornerPocketWidth, double sidePocketWidth, double muS, double muR, double muSp, double railHeight, double cueLength, double railVelDampingX, double railVelDampingY, double railSpinDamping, double railZSpinAngleAdj) {
    this(fastfizJNI.new_Table__SWIG_2(length, width, cornerPocketWidth, sidePocketWidth, muS, muR, muSp, railHeight, cueLength, railVelDampingX, railVelDampingY, railSpinDamping, railZSpinAngleAdj), true);
  }

  public Table(double length, double width, double cornerPocketWidth, double sidePocketWidth, double muS, double muR, double muSp, double railHeight, double cueLength, double railVelDampingX, double railVelDampingY, double railSpinDamping) {
    this(fastfizJNI.new_Table__SWIG_3(length, width, cornerPocketWidth, sidePocketWidth, muS, muR, muSp, railHeight, cueLength, railVelDampingX, railVelDampingY, railSpinDamping), true);
  }

  public Table(double length, double width, double cornerPocketWidth, double sidePocketWidth, double muS, double muR, double muSp, double railHeight, double cueLength, double railVelDampingX, double railVelDampingY) {
    this(fastfizJNI.new_Table__SWIG_4(length, width, cornerPocketWidth, sidePocketWidth, muS, muR, muSp, railHeight, cueLength, railVelDampingX, railVelDampingY), true);
  }

  public Table(double length, double width, double cornerPocketWidth, double sidePocketWidth, double muS, double muR, double muSp, double railHeight, double cueLength, double railVelDampingX) {
    this(fastfizJNI.new_Table__SWIG_5(length, width, cornerPocketWidth, sidePocketWidth, muS, muR, muSp, railHeight, cueLength, railVelDampingX), true);
  }

  public Table(double length, double width, double cornerPocketWidth, double sidePocketWidth, double muS, double muR, double muSp, double railHeight, double cueLength) {
    this(fastfizJNI.new_Table__SWIG_6(length, width, cornerPocketWidth, sidePocketWidth, muS, muR, muSp, railHeight, cueLength), true);
  }

  public Table(double length, double width, double cornerPocketWidth, double sidePocketWidth, double muS, double muR, double muSp, double railHeight) {
    this(fastfizJNI.new_Table__SWIG_7(length, width, cornerPocketWidth, sidePocketWidth, muS, muR, muSp, railHeight), true);
  }

  public Table(double length, double width, double cornerPocketWidth, double sidePocketWidth, double muS, double muR, double muSp) {
    this(fastfizJNI.new_Table__SWIG_8(length, width, cornerPocketWidth, sidePocketWidth, muS, muR, muSp), true);
  }

  public Table(double length, double width, double cornerPocketWidth, double sidePocketWidth, double muS, double muR) {
    this(fastfizJNI.new_Table__SWIG_9(length, width, cornerPocketWidth, sidePocketWidth, muS, muR), true);
  }

  public Table(double length, double width, double cornerPocketWidth, double sidePocketWidth, double muS) {
    this(fastfizJNI.new_Table__SWIG_10(length, width, cornerPocketWidth, sidePocketWidth, muS), true);
  }

  public Table(double length, double width, double cornerPocketWidth, double sidePocketWidth) {
    this(fastfizJNI.new_Table__SWIG_11(length, width, cornerPocketWidth, sidePocketWidth), true);
  }

  public Table(Table rhs) {
    this(fastfizJNI.new_Table__SWIG_12(Table.getCPtr(rhs), rhs), true);
  }

  public double getLength() {
    return fastfizJNI.Table_getLength(swigCPtr, this);
  }

  public double getWidth() {
    return fastfizJNI.Table_getWidth(swigCPtr, this);
  }

  public double getHeadString() {
    return fastfizJNI.Table_getHeadString(swigCPtr, this);
  }

  public Point getFootSpot() {
    return new Point(fastfizJNI.Table_getFootSpot(swigCPtr, this), false);
  }

  public void setCueLength(double length) {
    fastfizJNI.Table_setCueLength(swigCPtr, this, length);
  }

  public double getCueLength() {
    return fastfizJNI.Table_getCueLength(swigCPtr, this);
  }

  public void setRailHeight(double height) {
    fastfizJNI.Table_setRailHeight(swigCPtr, this, height);
  }

  public double getRailHeight() {
    return fastfizJNI.Table_getRailHeight(swigCPtr, this);
  }

  public void setMuSliding(double mu) {
    fastfizJNI.Table_setMuSliding(swigCPtr, this, mu);
  }

  public double getMuSliding() {
    return fastfizJNI.Table_getMuSliding(swigCPtr, this);
  }

  public void setMuRolling(double mu) {
    fastfizJNI.Table_setMuRolling(swigCPtr, this, mu);
  }

  public double getMuRolling() {
    return fastfizJNI.Table_getMuRolling(swigCPtr, this);
  }

  public void setMuSpinning(double mu) {
    fastfizJNI.Table_setMuSpinning(swigCPtr, this, mu);
  }

  public double getMuSpinning() {
    return fastfizJNI.Table_getMuSpinning(swigCPtr, this);
  }

  public Point getPocketCenter(Table.Pocket pocket) {
    return new Point(fastfizJNI.Table_getPocketCenter(swigCPtr, this, pocket.swigValue()), false);
  }

  public Point getPocketRight(Table.Pocket pocket) {
    return new Point(fastfizJNI.Table_getPocketRight(swigCPtr, this, pocket.swigValue()), false);
  }

  public Point getPocketLeft(Table.Pocket pocket) {
    return new Point(fastfizJNI.Table_getPocketLeft(swigCPtr, this, pocket.swigValue()), false);
  }

  public static Table defaultTable() {
    return new Table(fastfizJNI.Table_defaultTable(), false);
  }

  public static Ball.State stateFromPocket(Table.Pocket pocket) {
    return Ball.State.swigToEnum(fastfizJNI.Table_stateFromPocket(pocket.swigValue()));
  }

  public static Table.Pocket pocketFromBndId(Table.BoundaryId bnd) {
    return Table.Pocket.swigToEnum(fastfizJNI.Table_pocketFromBndId(bnd.swigValue()));
  }

  public static Table.BoundaryId bndIdFromPocket(Table.Pocket pocket) {
    return Table.BoundaryId.swigToEnum(fastfizJNI.Table_bndIdFromPocket(pocket.swigValue()));
  }

  public static String boundaryName(Table.BoundaryId boundary) {
    return fastfizJNI.Table_boundaryName(boundary.swigValue());
  }

  public static String pocketName(Table.Pocket pocket) {
    return fastfizJNI.Table_pocketName(pocket.swigValue());
  }

  public final static double g = fastfizJNI.Table_g_get();
  public final static double MU_SLIDING = fastfizJNI.Table_MU_SLIDING_get();
  public final static double MU_ROLLING = fastfizJNI.Table_MU_ROLLING_get();
  public final static double MU_SPINNING = fastfizJNI.Table_MU_SPINNING_get();
  public final static double TABLE_LENGTH = fastfizJNI.Table_TABLE_LENGTH_get();
  public final static double TABLE_WIDTH = fastfizJNI.Table_TABLE_WIDTH_get();
  public final static double CORNER_POCKET_WIDTH = fastfizJNI.Table_CORNER_POCKET_WIDTH_get();
  public final static double SIDE_POCKET_WIDTH = fastfizJNI.Table_SIDE_POCKET_WIDTH_get();
  public final static double RAIL_HEIGHT = fastfizJNI.Table_RAIL_HEIGHT_get();
  public final static double CUE_LENGTH = fastfizJNI.Table_CUE_LENGTH_get();
  public final static double RAIL_VEL_DAMPING_X = fastfizJNI.Table_RAIL_VEL_DAMPING_X_get();
  public final static double RAIL_VEL_DAMPING_Y = fastfizJNI.Table_RAIL_VEL_DAMPING_Y_get();
  public final static double RAIL_SPIN_DAMPING = fastfizJNI.Table_RAIL_SPIN_DAMPING_get();
  public final static double RAIL_VEL_ANGLE_ADJ = fastfizJNI.Table_RAIL_VEL_ANGLE_ADJ_get();
  public final static double RAIL_ZSPIN_ANGLE_ADJ = fastfizJNI.Table_RAIL_ZSPIN_ANGLE_ADJ_get();
  public final static double CUE_MASS = fastfizJNI.Table_CUE_MASS_get();
  public final static double I = fastfizJNI.Table_I_get();
  public final static class BoundaryId {
    public final static Table.BoundaryId SW_POCKET = new Table.BoundaryId("SW_POCKET");
    public final static Table.BoundaryId SW_RAIL = new Table.BoundaryId("SW_RAIL");
    public final static Table.BoundaryId W_POCKET = new Table.BoundaryId("W_POCKET");
    public final static Table.BoundaryId NW_RAIL = new Table.BoundaryId("NW_RAIL");
    public final static Table.BoundaryId NW_POCKET = new Table.BoundaryId("NW_POCKET");
    public final static Table.BoundaryId N_RAIL = new Table.BoundaryId("N_RAIL");
    public final static Table.BoundaryId NE_POCKET = new Table.BoundaryId("NE_POCKET");
    public final static Table.BoundaryId NE_RAIL = new Table.BoundaryId("NE_RAIL");
    public final static Table.BoundaryId E_POCKET = new Table.BoundaryId("E_POCKET");
    public final static Table.BoundaryId SE_RAIL = new Table.BoundaryId("SE_RAIL");
    public final static Table.BoundaryId SE_POCKET = new Table.BoundaryId("SE_POCKET");
    public final static Table.BoundaryId S_RAIL = new Table.BoundaryId("S_RAIL");
    public final static Table.BoundaryId UNKNOWN_BOUNDARY = new Table.BoundaryId("UNKNOWN_BOUNDARY");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static BoundaryId swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + BoundaryId.class + " with value " + swigValue);
    }

    private BoundaryId(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private BoundaryId(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private BoundaryId(String swigName, BoundaryId swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static BoundaryId[] swigValues = { SW_POCKET, SW_RAIL, W_POCKET, NW_RAIL, NW_POCKET, N_RAIL, NE_POCKET, NE_RAIL, E_POCKET, SE_RAIL, SE_POCKET, S_RAIL, UNKNOWN_BOUNDARY };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Pocket {
    public final static Table.Pocket SW = new Table.Pocket("SW");
    public final static Table.Pocket W = new Table.Pocket("W");
    public final static Table.Pocket NW = new Table.Pocket("NW");
    public final static Table.Pocket NE = new Table.Pocket("NE");
    public final static Table.Pocket E = new Table.Pocket("E");
    public final static Table.Pocket SE = new Table.Pocket("SE");
    public final static Table.Pocket UNKNOWN_POCKET = new Table.Pocket("UNKNOWN_POCKET");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Pocket swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Pocket.class + " with value " + swigValue);
    }

    private Pocket(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Pocket(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Pocket(String swigName, Pocket swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Pocket[] swigValues = { SW, W, NW, NE, E, SE, UNKNOWN_POCKET };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
