/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package JFastfiz;

public class TableState {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected TableState(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TableState obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(TableState obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        fastfizJNI.delete_TableState(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public TableState(Table table) {
    this(fastfizJNI.new_TableState__SWIG_0(Table.getCPtr(table), table), true);
  }

  public TableState() {
    this(fastfizJNI.new_TableState__SWIG_1(), true);
  }

  public TableState(TableState rhs) {
    this(fastfizJNI.new_TableState__SWIG_2(TableState.getCPtr(rhs), rhs), true);
  }

  public int getNumBalls() {
    return fastfizJNI.TableState_getNumBalls(swigCPtr, this);
  }

  public void fixOverlap(boolean VERBOSE) {
    fastfizJNI.TableState_fixOverlap(swigCPtr, this, VERBOSE);
  }

  public void setBall(Ball b) {
    fastfizJNI.TableState_setBall__SWIG_0(swigCPtr, this, Ball.getCPtr(b), b);
  }

  public void setBall(Ball.Type btype, Ball.State state, Point r) {
    fastfizJNI.TableState_setBall__SWIG_1(swigCPtr, this, btype.swigValue(), state.swigValue(), Point.getCPtr(r), r);
  }

  public void setBall(Ball.Type btype, Ball.State state, double x, double y) {
    fastfizJNI.TableState_setBall__SWIG_2(swigCPtr, this, btype.swigValue(), state.swigValue(), x, y);
  }

  public void spotBall(Ball.Type btype, double dither) {
    fastfizJNI.TableState_spotBall__SWIG_0(swigCPtr, this, btype.swigValue(), dither);
  }

  public void spotBall(Ball.Type btype) {
    fastfizJNI.TableState_spotBall__SWIG_1(swigCPtr, this, btype.swigValue());
  }

  public Ball getBall(Ball.Type btype) {
    return new Ball(fastfizJNI.TableState_getBall(swigCPtr, this, btype.swigValue()), false);
  }

  public Table getTable() {
    return new Table(fastfizJNI.TableState_getTable(swigCPtr, this), false);
  }

  public int isValidBallPlacement(boolean VERBOSE) {
    return fastfizJNI.TableState_isValidBallPlacement__SWIG_0(swigCPtr, this, VERBOSE);
  }

  public int isValidBallPlacement() {
    return fastfizJNI.TableState_isValidBallPlacement__SWIG_1(swigCPtr, this);
  }

  public int isPhysicallyPossible(ShotParams shotParams, boolean VERBOSE) {
    return fastfizJNI.TableState_isPhysicallyPossible__SWIG_0(swigCPtr, this, ShotParams.getCPtr(shotParams), shotParams, VERBOSE);
  }

  public int isPhysicallyPossible(ShotParams shotParams) {
    return fastfizJNI.TableState_isPhysicallyPossible__SWIG_1(swigCPtr, this, ShotParams.getCPtr(shotParams), shotParams);
  }

  public void addNoise(double dither) {
    fastfizJNI.TableState_addNoise(swigCPtr, this, dither);
  }

  public void randomize() {
    fastfizJNI.TableState_randomize(swigCPtr, this);
  }

  public Shot executeShot(ShotParams sp, boolean verbose, boolean errors) {
    long cPtr = fastfizJNI.TableState_executeShot__SWIG_0(swigCPtr, this, ShotParams.getCPtr(sp), sp, verbose, errors);
    return (cPtr == 0) ? null : new Shot(cPtr, true);
  }

  public Shot executeShot(ShotParams sp, boolean verbose) {
    long cPtr = fastfizJNI.TableState_executeShot__SWIG_1(swigCPtr, this, ShotParams.getCPtr(sp), sp, verbose);
    return (cPtr == 0) ? null : new Shot(cPtr, true);
  }

  public Shot executeShot(ShotParams sp) {
    long cPtr = fastfizJNI.TableState_executeShot__SWIG_2(swigCPtr, this, ShotParams.getCPtr(sp), sp);
    return (cPtr == 0) ? null : new Shot(cPtr, true);
  }

  public Ball.Type getFirstBallHit(ShotParams sp) {
    return Ball.Type.swigToEnum(fastfizJNI.TableState_getFirstBallHit(swigCPtr, this, ShotParams.getCPtr(sp), sp));
  }

  public String toString() {
    return fastfizJNI.TableState_toString(swigCPtr, this);
  }

  public void fromString(String s) {
    fastfizJNI.TableState_fromString(swigCPtr, this, s);
  }

  public final static double MAX_VELOCITY = fastfizJNI.TableState_MAX_VELOCITY_get();
  public final static double MIN_THETA = fastfizJNI.TableState_MIN_THETA_get();
  public final static double MAX_THETA = fastfizJNI.TableState_MAX_THETA_get();
  public final static int OK_PRECONDITION = fastfizJNI.TableState_OK_PRECONDITION_get();
  public final static int BAD_A_VAL = fastfizJNI.TableState_BAD_A_VAL_get();
  public final static int BAD_B_VAL = fastfizJNI.TableState_BAD_B_VAL_get();
  public final static int BAD_THETA_VAL = fastfizJNI.TableState_BAD_THETA_VAL_get();
  public final static int BAD_PHI_VAL = fastfizJNI.TableState_BAD_PHI_VAL_get();
  public final static int BAD_V_VAL = fastfizJNI.TableState_BAD_V_VAL_get();
  public final static int BAD_X_VAL = fastfizJNI.TableState_BAD_X_VAL_get();
  public final static int BAD_Y_VAL = fastfizJNI.TableState_BAD_Y_VAL_get();
  public final static int CUE_STICK_COLLISION = fastfizJNI.TableState_CUE_STICK_COLLISION_get();
  public final static int BALL_OVERLAP = fastfizJNI.TableState_BALL_OVERLAP_get();
}
